name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: yarn lint --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: 🎨 Check code formatting
        run: yarn prettier --check .
        continue-on-error: true

      - name: 📊 Upload ESLint results
        uses: github/super-linter@v5
        if: always()
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_CSS: true
          VALIDATE_HTML: true

  # Job 2: Testing & Coverage
  test:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🧪 Run tests
        run: yarn test --coverage --reporter=json --outputFile=test-results.json

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📈 Coverage comment
        uses: 5monkeys/cobertura-action@master
        if: github.event_name == 'pull_request'
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 70

  # Job 3: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Run security audit
        run: yarn audit --json > security-audit.json
        continue-on-error: true

      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 4: Build & Performance
  build:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🏗️ Build application
        run: yarn build

      - name: 📏 Bundle size analysis
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: 'dist/**/*.{js,css,html}'
          exclude: '{**/*.map,**/node_modules/**}'

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: dist/
          retention-days: 30

  # Job 5: Deployment (if on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # Add your deployment commands here
          # Example: aws s3 sync dist/ s3://your-bucket --delete

  # Job 6: Notification
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, build]
    if: always()
    steps:
      - name: 📢 Notify on success
        if: needs.build.result == 'success'
        run: |
          echo "✅ All checks passed! Ready for deployment."

      - name: 📢 Notify on failure
        if: failure()
        run: |
          echo "❌ Pipeline failed. Please check the logs." 